// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  wills         Will[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Will {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Will metadata
  title       String?
  status      WillStatus @default(DRAFT)
  currentStep Int        @default(1)
  
  // Testator information
  testator    Testator?
  
  // Related entities
  beneficiaries    Beneficiary[]
  bankAccounts     BankAccount[]
  insurancePolicies InsurancePolicy[]
  stocks           Stock[]
  mutualFunds      MutualFund[]
  jewellery        Jewellery[]
  immovableAssets  ImmovableAsset[]
  executors        Executor[]
  witnesses        Witness[]
  
  // Guardian information
  guardianName     String?
  guardianRelation String?
  guardianAddress  String?
  guardianPhone    String?
  guardianEmail    String?
  minorChildren    String[] // Array of minor children names
  
  // Will details
  liabilities      String[] // Array of liability descriptions
  specialInstructions String?
  dateOfWill       DateTime?
  placeOfWill      String?
  
  // Generated content
  generatedHtml    String?   @db.Text
  generatedAt      DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Testator {
  id          String @id @default(cuid())
  willId      String @unique
  will        Will   @relation(fields: [willId], references: [id], onDelete: Cascade)
  
  fullName    String
  age         Int
  occupation  String
  address     String @db.Text
  idNumber    String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Beneficiary {
  id          String @id @default(cuid())
  willId      String
  will        Will   @relation(fields: [willId], references: [id], onDelete: Cascade)
  
  name        String
  relation    String
  idNumber    String
  address     String @db.Text
  age         Int
  percentage  Float? // Percentage of residual estate
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BankAccount {
  id            String @id @default(cuid())
  willId        String
  will          Will   @relation(fields: [willId], references: [id], onDelete: Cascade)
  
  bankName      String
  accountNumber String
  accountType   String
  branch        String
  beneficiaryId String // Reference to beneficiary by ID
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model InsurancePolicy {
  id            String @id @default(cuid())
  willId        String
  will          Will   @relation(fields: [willId], references: [id], onDelete: Cascade)
  
  policyNumber  String
  company       String
  policyType    String
  sumAssured    Float
  beneficiaryId String // Reference to beneficiary by ID
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Stock {
  id               String @id @default(cuid())
  willId           String
  will             Will   @relation(fields: [willId], references: [id], onDelete: Cascade)
  
  company          String
  numberOfShares   Int
  certificateNumber String?
  beneficiaryId    String // Reference to beneficiary by ID
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model MutualFund {
  id            String @id @default(cuid())
  willId        String
  will          Will   @relation(fields: [willId], references: [id], onDelete: Cascade)
  
  fundName      String
  folioNumber   String
  units         Float
  beneficiaryId String // Reference to beneficiary by ID
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Jewellery {
  id             String @id @default(cuid())
  willId         String
  will           Will   @relation(fields: [willId], references: [id], onDelete: Cascade)
  
  description    String @db.Text
  estimatedValue Float
  location       String
  beneficiaryId  String // Reference to beneficiary by ID
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ImmovableAsset {
  id                 String @id @default(cuid())
  willId             String
  will               Will   @relation(fields: [willId], references: [id], onDelete: Cascade)
  
  propertyType       String
  description        String @db.Text
  location           String @db.Text
  surveyNumber       String?
  registrationNumber String?
  estimatedValue     Float
  beneficiaryId      String // Reference to beneficiary by ID
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Executor {
  id        String @id @default(cuid())
  willId    String
  will      Will   @relation(fields: [willId], references: [id], onDelete: Cascade)
  
  name      String
  relation  String
  address   String @db.Text
  phone     String
  email     String?
  isPrimary Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Witness {
  id         String @id @default(cuid())
  willId     String
  will       Will   @relation(fields: [willId], references: [id], onDelete: Cascade)
  
  name       String
  address    String @db.Text
  phone      String
  occupation String
  idNumber   String
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum WillStatus {
  DRAFT
  COMPLETED
  FINALIZED
}